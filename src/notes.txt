1) Creating new project

django-admin startproject trydjango18 .

python manage.py runserver 			// starts server, check in browser at  http://127.0.0.1:8000/

python manage.py migrate			// creates admin db and other files

python manage.py createsuperuser		// creates superuser for admin site 

python manage.py runserver			// check at http://127.0.0.1:8000/admin/

python manage.py startapp newsletter		// creates a new app named newsletter

2) View and url
// newsletter/views.py
def home(request):
	return render(request, "home.html", {})

// trydjango18/urls.py urlpatterns
url(r'^$', 'newsletter.views.home', name='home') 

3) Settings are all inside settings.py file.
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'newsletter'
)

python manage.py makemigrations
python manage.py migrate
python manage.py runserver

4) create a directory named 'templates' inside 'newsletter'
   create a file home.html inside  templates.

another way to setup templates.
   create a directory 'templates' in the root directory where manage.py is there.
   In settings.py 
  	TEMPLATES = [
    {
        'DIRS': [os.path.join(BASE_DIR, "templates")],
    }

or
 'DIRS': [os.path.join(BASE_DIR, "templates"), "/home/toktok/programming/python_programming/trydjangotut/src/abctemplates"],

5)models.py
class SignUp(models.Model):
	email = models.EmailField()
	full_name = models.CharField(max_length=120,blank=True,null=True)
	timestamp = models.DateTimeField(auto_now_add=True, auto_now=False)
	updated = models.DateTimeField(auto_now_add=False, auto_now=True)

	def __str__(self):  #__unicode__ 2.6 or 3.2
		return self.email

// make sure settings.py has 'newsletter' added in Installed apps 

python manage.py makemigrations			// Initializes the migration to db
python manage.py migrate			// applies the migration


6) Adding the database in admin console admin.py

from .models import SignUp
admin.site.register(SignUp)

7) To display more options for admin
admin.py

class SignUpAdmin(admin.ModelAdmin):
	list_display = ["__str__", "timestamp", "updated"]
	class Meta:
		model = SignUp
admin.site.register(SignUp, SignUpAdmin)

//More info 
https://docs.djangoproject.com/en/1.9/ref/contrib/admin/

8) Model form

//create a file forms.py inside 'newsletter'
from django import forms
from .models import SignUp

class SignUpForm(forms.ModelForm):
	class Meta:
		model = SignUp
		fields = ['full_name', 'email']
		#exclude = ['full_name']				#Avoid using exclude

// In admin.py 
from .forms import SignUpForm
from .models import SignUp

class SignUpAdmin(admin.ModelAdmin):
	list_display = ["__str__", "timestamp", "updated"]
	form = SignUpForm
	# class Meta:
	# 	model = SignUp
admin.site.register(SignUp, SignUpAdmin)

9) Custom validation

// forms.py
class SignUpForm(forms.ModelForm):

	def clean_email(self):
		print(self.cleaned_data)
		return "abc@mail.com"
		
9.1)
def clean_email(self):
		email = (self.cleaned_data.get('email'))
		if not "edu" in email:
			raise forms.ValidationError("Please use a valid .EDU email address")
		return email
9.2)
	def clean_email(self):
		email = (self.cleaned_data.get('email'))
		email_base, provider = email.split("@")
		domain, extension = provider.split(".")
		if not domain == "bit":
			raise forms.ValidationError("Please use a valid bit email address")
		if not extension == "edu":
			raise forms.ValidationError("Please use a valid .EDU email address")
		return email

	def clean_full_name(self):
		full_name = self.cleaned_data.get('full_name')
		return full_name

10)Views and templates
//views.py

def home(request):
	title = "Title context"
	title1 = "Title context %s" %(request.user)
	context = {
	    "template_title": title,
	    "template_title1": title1,
	}
	return render(request, "home.html", context)

// home.html
<h2>{{ template_title }}</h2>
<h2>{{ template_title1 }}</h2>

title = "Title context %s" %(request.user)

10.1)
title = "welcome"
	if request.user.is_authenticated():
		title = "Title context %s" %(request.user)
	context = {
	    "template_title": title,
	}
	return render(request, "home.html", context)

11)form in view

//views.py

from django.shortcuts import render
from .forms import SignUpForm
# Create your views here.
def home(request):

	title = "welcome"
	
	form = SignUpForm()
	context = {
	    "template_title": title,
	    "form": form,
	}
	return render(request, "home.html", context)

//forms.html
<form method = "POST" action="">{% csrf_token %}
	{{ form }}
	<input type="submit" value="Sign up"/>
</form>

11.1)
{{ form.as_p }}   //Paragraph forms

11.2)
def home(request):

	title = "welcome"	
	if request.method == "POST":
		print(request.POST)
	form = SignUpForm()
	context = {
	    "template_title": title,
	    "form": form,
	}
	return render(request, "home.html", context)

// You could also do like this, make sure to comment out that 'if' statement before
form = SignUpForm(request.POST or None)  
if form.is_valid():
		instance = form.save(commit = False)
		if not instance.full_name:
			instance.full_name = "John Doe"
		instance.save()
		print(instance.email)
		print(instance.timestamp)

11.3)
	context = {
	    "template_title": title,
	    "form": form,
	}
	
	if form.is_valid():
		instance = form.save(commit = False)
		if not instance.full_name:
			instance.full_name = "John Doe"
		instance.save()
		context = {
	        "template_title":"Thank you"
	    }
	return render(request, "home.html", context)

11.4) validations can also be done in the views.py instead of forms.py

if form.is_valid():
		#print(request.POST["email"]) # not recomended
		instance = form.save(commit = False)

		full_name = form.cleaned_data.get("full_name")
		if not full_name:
			full_name = "New full name"
		instance.full_name = full_name
		instance.save()
		context = {
	        "template_title":"Thank you"
	    }

12) Contact form

// forms.py
class ContactForm(forms.Form):
	full_name = forms.CharField()
	email = forms.EmailField()
	message = forms.CharField(widget = forms.Textarea)

// views.py
from .forms import ContactForm

def contact(request):
	form = ContactForm(request.POST or None)
	context = {
        "form": form
	}
	if form.is_valid():

		for key, value in form.cleaned_data.items():
			print(key,value)
			#print(form.cleaned_data.get(key))
		# full_name = form.cleaned_data.get("full_name")
		# email = form.cleaned_data.get("email")
		# message = form.cleaned_data.get("message")

	return render(request, "contact.html", context)

// urls.py
url(r'^contact/$','contactus.views.contact', name='contact'),

// templates/contact.html
<form method = "POST" action="">{% csrf_token %}
	{{ form.as_p }}
	<input type="submit" value="Send request"/>
</form>

13)Sending email

//Email settings in settings.py
EMAIL_HOST ='smtp.gmail.com'
EMAIL_HOST_USER = 'toktok420@gmail.com'
EMAIL_HOST_PASSWORD = 'boy0boy810'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

// contactus/views.py

subject = "Site contact form"
		from_email = settings.EMAIL_HOST_USER
		to_email = [from_email, "hemasagarm@gmail.com"]
		contact_message = "%s: %s via %s" %(
			contact_full_name, 
			contact_message, 
			contact_email)
		print(contact_message)
		some_html_message = """
        <h1>Hello buddy</h1>
        """
		send_mail(subject, 
			contact_message, 
			from_email, 
			to_email,
			#html_message = some_html_message, 
			fail_silently=False)

https://docs.djangoproject.com/en/1.9/topics/email/

14) Static files

//create a folder names 'static_project' and inside it add 2 folders 'static_root' and 'our_static'

// Inside 'our_static' create a folder 'img'

// settings.py

STATIC_ROOT = os.path.join(BASE_DIR, "static_project", "static_root")

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static_project", "our_static"),
    #os.path.join(BASE_DIR, "static_in_env"),
    #'/var/www/static/',
)
// run
python manage.py collectstatic


14.1) Or try this method 

// Also create a folder 'static_in_env' inside the virtualenv 'django18' folder... now add that folder to sublime project

// Create folder 'static_root' inside 'static_in_env'

// settings.py

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_in_env", "static_root")

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static_project", "our_static"),
    os.path.join(BASE_DIR, "static_in_env"),
    #'/var/www/static/',
)

// run
python manage.py collectstatic

14.2)
//Create a folder 'media_root' inside 'static_env'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_in_env", "media_root")

15) Serving static files

// urls.py

from django.conf import settings
from django.conf.urls import include, url
from django.conf.urls.static import static
from django.contrib import admin


urlpatterns = [
    # Examples:
    url(r'^$', 'newsletter.views.home', name='home'),
    url(r'^contact/$','contactus.views.contact', name='contact'),
    # url(r'^blog/', include('blog.urls')),

    url(r'^admin/', include(admin.site.urls)),
] #+ static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) // use this or below using if statement

if settings.DEBUG:
	urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
	urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

16)Bootstrap
// Go to 'http://getbootstrap.com/examples/' click on some example copy the source code

// create a file 'base.html' in templates and paste the source.

// Copy paste the cdn link from bootstrap in the head section or do it manually by downloading 'bootstrap' code

// copy paste the 'bootstrap.min.css' file to the location '/home/toktok/programming/python_programming/trydjangotut/src/static_project/our_static/css/'

// Do same for 'navbar-static-top.css'

// copy paste the below code(present in django site...) on the top of 'base.html' file 
{% load staticfiles %}

// And below code in the head section
<link href="{% static 'css/bootstrap.min.css' %}" rel="stylesheet">
<link href="{% static 'css/navbar-static-top.css' %}" rel="stylesheet">

// After everything run the below command to collect all static files inside 'static_in_env'
python manage.py collectstatic

// Again repeat for the js files and image files etc

<script src="{% static 'js/jquery.min.js' %}"></script>
<script src="{% static 'js/bootstrap.min.js' %}"></script>
<script src="{% static 'js/ie10-viewport-bug-workaround.js' %}"></script>
<link rel="icon" href="{% static 'img/favicon.ico' %}">

17) Django templates

// cut all the navbar div in 'base.html' and paste it in a new 'navbar.html' inside templates folder

// Include the below line
{% include 'navbar.html' %}

// Optional 
{% verbatim %}
{% include 'navbar.html' %}
{% endverbatim %}

//commenting
{# verbatim #}

17.1) extending

// cut the jumbotron div and paste it on top of 'base.html'

// add the following in that place which was cut
{% block content %}

{% endblock %}

// add to top of home.html
{% extends 'base.html' %}

// Enclose the form withing the {% block content %} {% endblock %}

// In 'views.py'change render argument to 'home.html'

17.2) block super
//home.html
{% block jumbotron %}
	Hi
	{{ block.super }}
{% endblock %}

// base.html
{% block jumbotron %}

      <!-- Main component for a primary marketing message or call to action -->
      <div class="jumbotron">
        <h1>Navbar example</h1>
        <p>This example is a quick exercise to illustrate how the default, static and fixed to top navbar work. It includes the responsive CSS and HTML, so it also adapts to your viewport and device.</p>
        <p>To see the difference between static and fixed top navbars, just scroll.</p>
        <p>
          <a class="btn btn-lg btn-primary" href="../../components/#navbar" role="button">View navbar docs &raquo;</a>
        </p>
      </div>

{% endblock %}

18) Bootstrap third party crispy forms

pip install --upgrade django-crispy-forms

INSTALLED_APPS = (
    #django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #Third party apps
    'crispy_forms',
    #My apps
    'newsletter',
    'contactus',
)

python manage.py makemigrations
python manage.py migrate

CRISPY_TEMPLATE_PACK = 'bootstrap3'

//'home.html'
{% load crispy_forms_tags %}
<form method = "POST" action="">{% csrf_token %}
	{{ form|crispy }}
	<input class="btn btn-primary" type="submit" value="Sign up"/>
</form>

18.1) home.html 
// refer bootstrap css grid to adjust form size
http://getbootstrap.com/css/#grid

{% block content%}
<div class="row">
	  <div class="col-sm-6 col-md-4">
		<h1>Hello again</h1>
		<h2>{{ template_title }}</h2>
		<h2>{{ template_title1 }}</h2>
		<form method = "POST" action="">{% csrf_token %}
			{{ form|crispy }}
			<input class="btn btn-primary" type="submit" value="Sign up"/>
		</form>
	  </div>
</div>

{% endblock %}

19) bootstrap grid system
// In both 'navbar.html' and 'base.html'
<div class="container-fluid">

20)create a aboutus view

// in trydjango18 folder create a 'views.py'
from django.shortcuts import render
# Create your views here.
def about(request):
	return render(request, "about.html", {})

//urls.py
url(r'^about/$','trydjango18.views.about', name='about'),

//In 'navbar.html' doing urlnames as links.
<li><a href="{% url "about" %}">About</a></li>

21) contact page styling
//contact.html

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block content %}
<div>
	<form method = "POST" action="">{% csrf_token %}
		{{form|crispy}}
		<input class="btn btn-primary" type="submit" value="Send request"/>
	</form>
</div>
{% endblock %}

//custom title for 'contact.html'
{% block content %}

<div class="row">
	<div class="col-sm-6 col-sm-offset-3">
		{% if title %}
			<h1 class="text-align-center">{{ title }}</h1>
		{% endif %}
		<form method = "POST" action="">{% csrf_token %}
			{{form|crispy}}
			<input class="btn btn-default" type="submit" value="Send request"/>
		</form>
	</div>
</div>
{% endblock %}

21.1) We can also use the 'if' statements inside div class

//'contact.html'

<div class="col-sm-6 col-sm-offset-3">
<h1 class="{% if title_align_center %}text-align-center{% endif %}">{{ title }}</h1>


22) Django registration redux

pip install django-registration-redux

// settings.py
ACCOUNT_ACTIVATION_DAYS = 7
REGISTRATION_AUTO_LOGIN = True

python manage.py migrate

22.1) settings.py
SITE_ID = 1
LOGIN_REDIRECT_URL = '/'  // to redirect site after user login

23)Aunthentication link

//navbar.html
<ul class="nav navbar-nav navbar-right">
          {% if request.user.is_authenticated %}
            <li><a href="{% url 'auth_logout' %}">Logout</a></li>
            {% else %}
            <li><a href="{% url 'auth_login' %}">Login</a></li>
            <li><a href="{% url 'registration_register' %}">Register</a></li>
            {% endif %}
          </ul>
</ul>

23.1)
<ul class="nav navbar-nav navbar-right">
          {% if request.user.is_authenticated %}
            <li><a href="{% url 'auth_logout' %}">Logout</a></li>
            {% else %}
            <li><a href="{% url 'registration_register' %}">Register</a></li>
            {% endif %}
          </ul>

          {% if not request.user.is_authenticated and not "/accounts/login" in request.get_full_path %}
          <form class="navbar-form navbar-right" method="POST" action="{% url 'auth_login' %}">{% csrf_token %}
            <div class="form-group">
              <input type="text" class="form-control" name="username" placeholder="username"/>
            </div>
            <div class="form-group">
               <input type="password" class="form-control" name="password" placeholder="password"/>
            </div>
            <button type="submit" class="btn btn-default">Login</button>
          </form>
          {% endif %}

24)
